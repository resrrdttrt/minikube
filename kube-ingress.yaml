

# create service account
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress 
  namespace: default

# create cluster role
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nginx-ingress-role
rules:
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingressclasses"]
    verbs: ["get", "list"]

# create cluster role binding
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-sa
    namespace: default  # Change if necessary


# deploy ingress-controller
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: nginx-ingress
spec:
  selector:
    matchLabels:
      app: nginx-ingress
  template:
    metadata:
      labels:
        app: nginx-ingress
    spec:
      serviceAccountName: nginx-ingress-sa  # Set the service account here
      containers:
      - image: nginx/nginx-ingress:edge
        name: nginx-ingress
        ports:
        - name: http
          containerPort: 80
          hostPort: 80
        - name: https
          containerPort: 443
          hostPort: 443
        securityContext:
          allowPrivilegeEscalation: true
          runAsUser: 101 #nginx
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
        args:
            - --ingress-class=nginx

# deploy service to expose ingress controller
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress
spec:
  type: NodePort 
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app: nginx-ingress

# deploy ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: minimal-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx # chỉ định ingress-controller sẽ mapping đến
  rules: # rule http bao gồm 3 phần
  - host: my-first-host.com # thông tin host (optional) nếu ko chỉ định thì apply với mọi http request
    http: # Danh sách paths, mỗi path sẽ có thông tin pathType và một backend (service) tương ứng với port của nó.
      paths:
      - path: / # Mọi request tới mà có Path chứa Prefix là /testpath thì sẽ được forward tới servcie test ở port 80.
        pathType: Prefix # 3 pathType ImplementationSpecific, Exact, Prefix
        backend: # Một backend là một bộ gồm service và port
          service:
            name: my-ingress-svc
            port:
              number: 3000



# create pod for ingress
---
apiVersion: apps/v1 # change version API
kind: ReplicaSet
metadata:
  name: my-ingress-rs
spec:
  replicas: 2
  selector:
    matchLabels:
      app: test-svc
  template:
    metadata:
      labels:
        app: test-svc
    spec:
      containers:
      - image: flask-api
        name: random
        ports:
          - containerPort: 3000
        imagePullPolicy: Never


# create service for ingress
---
apiVersion: v1
kind: Service
metadata:
  name: my-ingress-svc
spec:
  selector:
    app: test-svc
  ports:
    - port: 3000 
      targetPort: 3000 